// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER) // Admin, User
  orders    Order[]
  cartItems CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Decimal
  stock       Int
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  images      Image[]  // Array of image URLs
  cartItems   CartItem[]
  orderItems  OrderItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
model Image {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  url       String
  createdAt DateTime @default(now())
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Order {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  totalAmount Decimal
  status      OrderStatus @default(PENDING) // Pending, Shipped, Delivered, Cancelled
  items       OrderItem[]
  payment     Payment?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal
}

model CartItem {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @unique
  paymentId String   @unique
  method    PaymentMethod
  status    PaymentStatus @default(PENDING) // Pending, Paid, Failed
  createdAt DateTime @default(now())
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  STRIPE
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}